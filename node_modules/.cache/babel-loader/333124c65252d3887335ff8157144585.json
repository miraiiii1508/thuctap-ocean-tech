{"ast":null,"code":"import _objectSpread from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  wards: [],\n  reload: false,\n  success: true,\n  error: null\n};\nvar wardSlide = createSlice({\n  name: \"ward\",\n  initialState: initialState,\n  reducers: {\n    showAllWardReducer: function showAllWardReducer(state, action) {\n      state.wards = action.payload;\n    },\n    addWardReducer: function addWardReducer(state, action) {\n      state.wards = [].concat(_toConsumableArray(state.wards), [action.payload]);\n      state.reload = !state.reload;\n    },\n    updateWardReducer: function updateWardReducer(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          updateData = _action$payload.updateData;\n      var index = state.wards.findIndex(function (ward) {\n        return ward.id === id;\n      });\n\n      if (index !== -1) {\n        state.wards[index] = _objectSpread(_objectSpread({}, state.wards[index]), updateData);\n      }\n\n      state.reload = !state.reload;\n    },\n    deleteWardsReducer: function deleteWardsReducer(state, action) {\n      state.wards = state.wards.filter(function (ward) {\n        return ward.id !== action.payload;\n      });\n      state.reload = !state.reload;\n    }\n  },\n  searchWardReducer: (state, action)\n});\nvar _wardSlide$actions = wardSlide.actions,\n    showAllWardReducer = _wardSlide$actions.showAllWardReducer,\n    addWardReducer = _wardSlide$actions.addWardReducer,\n    updateWardReducer = _wardSlide$actions.updateWardReducer,\n    deleteWardsReducer = _wardSlide$actions.deleteWardsReducer;\nexport { showAllWardReducer, addWardReducer, updateWardReducer, deleteWardsReducer };\nexport default wardSlide.reducer;","map":{"version":3,"sources":["D:/ThucTap/ThucTap/client/src/app/redux/reducers/WardReducer.js"],"names":["createSlice","initialState","wards","reload","success","error","wardSlide","name","reducers","showAllWardReducer","state","action","payload","addWardReducer","updateWardReducer","id","updateData","index","findIndex","ward","deleteWardsReducer","filter","searchWardReducer","actions","reducer"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,MAAM,EAAE,KAFW;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAMA,IAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAAY,EAAZA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,4BAACC,KAAD,EAAQC,MAAR,EAAmB;AACrCD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KAHO;AAIRC,IAAAA,cAAc,EAAE,wBAACH,KAAD,EAAQC,MAAR,EAAmB;AACjCD,MAAAA,KAAK,CAACR,KAAN,gCAAkBQ,KAAK,CAACR,KAAxB,IAA+BS,MAAM,CAACC,OAAtC;AACAF,MAAAA,KAAK,CAACP,MAAN,GAAe,CAACO,KAAK,CAACP,MAAtB;AACD,KAPO;AAQRW,IAAAA,iBAAiB,EAAE,2BAACJ,KAAD,EAAQC,MAAR,EAAmB;AAAA,4BACTA,MAAM,CAACC,OADE;AAAA,UAC5BG,EAD4B,mBAC5BA,EAD4B;AAAA,UACxBC,UADwB,mBACxBA,UADwB;AAEpC,UAAMC,KAAK,GAAGP,KAAK,CAACR,KAAN,CAAYgB,SAAZ,CAAsB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACJ,EAAL,KAAYA,EAAtB;AAAA,OAAtB,CAAd;;AACA,UAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBP,QAAAA,KAAK,CAACR,KAAN,CAAYe,KAAZ,oCACKP,KAAK,CAACR,KAAN,CAAYe,KAAZ,CADL,GAEKD,UAFL;AAID;;AACDN,MAAAA,KAAK,CAACP,MAAN,GAAe,CAACO,KAAK,CAACP,MAAtB;AACD,KAlBO;AAmBRiB,IAAAA,kBAAkB,EAAE,4BAACV,KAAD,EAAQC,MAAR,EAAmB;AACrCD,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYmB,MAAZ,CAAmB,UAACF,IAAD;AAAA,eAAUA,IAAI,CAACJ,EAAL,KAAYJ,MAAM,CAACC,OAA7B;AAAA,OAAnB,CAAd;AACAF,MAAAA,KAAK,CAACP,MAAN,GAAe,CAACO,KAAK,CAACP,MAAtB;AACD;AAtBO,GAHkB;AA2B5BmB,EAAAA,iBAAiB,GAAEZ,KAAK,EAAGC,MAAV;AA3BW,CAAD,CAA7B;yBAkCIL,SAAS,CAACiB,O;IAJZd,kB,sBAAAA,kB;IACAI,c,sBAAAA,c;IACAC,iB,sBAAAA,iB;IACAM,kB,sBAAAA,kB;;AAEF,eAAed,SAAS,CAACkB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialState = {\r\n  wards: [],\r\n  reload: false,\r\n  success: true,\r\n  error: null,\r\n};\r\nconst wardSlide = createSlice({\r\n  name: \"ward\",\r\n  initialState,\r\n  reducers: {\r\n    showAllWardReducer: (state, action) => {\r\n      state.wards = action.payload;\r\n    },\r\n    addWardReducer: (state, action) => {\r\n      state.wards = [...state.wards, action.payload];\r\n      state.reload = !state.reload;\r\n    },\r\n    updateWardReducer: (state, action) => {\r\n      const { id, updateData } = action.payload;\r\n      const index = state.wards.findIndex((ward) => ward.id === id);\r\n      if (index !== -1) {\r\n        state.wards[index] = {\r\n          ...state.wards[index],\r\n          ...updateData,\r\n        };\r\n      }\r\n      state.reload = !state.reload;\r\n    },\r\n    deleteWardsReducer: (state, action) => {\r\n      state.wards = state.wards.filter((ward) => ward.id !== action.payload);\r\n      state.reload = !state.reload;\r\n    },\r\n  },\r\n  searchWardReducer:(state , action)\r\n});\r\nexport const {\r\n  showAllWardReducer,\r\n  addWardReducer,\r\n  updateWardReducer,\r\n  deleteWardsReducer,\r\n} = wardSlide.actions;\r\nexport default wardSlide.reducer;\r\n"]},"metadata":{},"sourceType":"module"}