{"ast":null,"code":"import _slicedToArray from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return a;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n}; // src/devModeChecks/identityFunctionCheck.ts\n\n\nvar runIdentityFunctionCheck = function runIdentityFunctionCheck(resultFunc, inputSelectorsResults, outputSelectorResult) {\n  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {\n    var isInputSameAsOutput = false;\n\n    try {\n      var emptyObject = {};\n      if (resultFunc(emptyObject) === emptyObject) isInputSameAsOutput = true;\n    } catch (e) {}\n\n    if (isInputSameAsOutput) {\n      var stack = void 0;\n\n      try {\n        throw new Error();\n      } catch (e) {\n        ;\n        stack = e.stack;\n      }\n\n      console.warn(\"The result function returned its own inputs without modification. e.g\\n`createSelector([state => state.todos], todos => todos)`\\nThis could lead to inefficient memoization and unnecessary re-renders.\\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.\", {\n        stack: stack\n      });\n    }\n  }\n}; // src/devModeChecks/inputStabilityCheck.ts\n\n\nvar runInputStabilityCheck = function runInputStabilityCheck(inputSelectorResultsObject, options, inputSelectorArgs) {\n  var memoize = options.memoize,\n      memoizeOptions = options.memoizeOptions;\n  var inputSelectorResults = inputSelectorResultsObject.inputSelectorResults,\n      inputSelectorResultsCopy = inputSelectorResultsObject.inputSelectorResultsCopy;\n  var createAnEmptyObject = memoize.apply(void 0, [function () {\n    return {};\n  }].concat(_toConsumableArray(memoizeOptions)));\n  var areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);\n\n  if (!areInputSelectorResultsEqual) {\n    var stack = void 0;\n\n    try {\n      throw new Error();\n    } catch (e) {\n      ;\n      stack = e.stack;\n    }\n\n    console.warn(\"An input selector returned a different result when passed same arguments.\\nThis means your output selector will likely run more frequently than intended.\\nAvoid returning a new reference inside your input selector, e.g.\\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`\", {\n      arguments: inputSelectorArgs,\n      firstInputs: inputSelectorResults,\n      secondInputs: inputSelectorResultsCopy,\n      stack: stack\n    });\n  }\n}; // src/devModeChecks/setGlobalDevModeChecks.ts\n\n\nvar globalDevModeChecks = {\n  inputStabilityCheck: \"once\",\n  identityFunctionCheck: \"once\"\n};\n\nvar setGlobalDevModeChecks = function setGlobalDevModeChecks(devModeChecks) {\n  Object.assign(globalDevModeChecks, devModeChecks);\n}; // src/utils.ts\n\n\nvar NOT_FOUND = /* @__PURE__ */Symbol(\"NOT_FOUND\");\n\nfunction assertIsFunction(func) {\n  var errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"expected a function, instead received \".concat(typeof func);\n\n  if (typeof func !== \"function\") {\n    throw new TypeError(errorMessage);\n  }\n}\n\nfunction assertIsObject(object) {\n  var errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"expected an object, instead received \".concat(typeof object);\n\n  if (typeof object !== \"object\") {\n    throw new TypeError(errorMessage);\n  }\n}\n\nfunction assertIsArrayOfFunctions(array) {\n  var errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"expected all items to be functions, instead received the following types: \";\n\n  if (!array.every(function (item) {\n    return typeof item === \"function\";\n  })) {\n    var itemTypes = array.map(function (item) {\n      return typeof item === \"function\" ? \"function \".concat(item.name || \"unnamed\", \"()\") : typeof item;\n    }).join(\", \");\n    throw new TypeError(\"\".concat(errorMessage, \"[\").concat(itemTypes, \"]\"));\n  }\n}\n\nvar ensureIsArray = function ensureIsArray(item) {\n  return Array.isArray(item) ? item : [item];\n};\n\nfunction getDependencies(createSelectorArgs) {\n  var dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;\n  assertIsArrayOfFunctions(dependencies, \"createSelector expects all input-selectors to be functions, but received the following types: \");\n  return dependencies;\n}\n\nfunction collectInputSelectorResults(dependencies, inputSelectorArgs) {\n  var inputSelectorResults = [];\n  var length = dependencies.length;\n\n  for (var i = 0; i < length; i++) {\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));\n  }\n\n  return inputSelectorResults;\n}\n\nvar getDevModeChecksExecutionInfo = function getDevModeChecksExecutionInfo(firstRun, devModeChecks) {\n  var _spreadValues = __spreadValues(__spreadValues({}, globalDevModeChecks), devModeChecks),\n      identityFunctionCheck = _spreadValues.identityFunctionCheck,\n      inputStabilityCheck = _spreadValues.inputStabilityCheck;\n\n  return {\n    identityFunctionCheck: {\n      shouldRun: identityFunctionCheck === \"always\" || identityFunctionCheck === \"once\" && firstRun,\n      run: runIdentityFunctionCheck\n    },\n    inputStabilityCheck: {\n      shouldRun: inputStabilityCheck === \"always\" || inputStabilityCheck === \"once\" && firstRun,\n      run: runInputStabilityCheck\n    }\n  };\n}; // src/autotrackMemoize/autotracking.ts\n\n\nvar $REVISION = 0;\nvar CURRENT_TRACKER = null;\n\nvar Cell = /*#__PURE__*/function () {\n  function Cell(initialValue) {\n    var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tripleEq;\n\n    _classCallCheck(this, Cell);\n\n    __publicField(this, \"revision\", $REVISION);\n\n    __publicField(this, \"_value\");\n\n    __publicField(this, \"_lastValue\");\n\n    __publicField(this, \"_isEqual\", tripleEq);\n\n    this._value = this._lastValue = initialValue;\n    this._isEqual = isEqual;\n  } // Whenever a storage value is read, it'll add itself to the current tracker if\n  // one exists, entangling its state with that cache.\n\n\n  _createClass(Cell, [{\n    key: \"value\",\n    get: function get() {\n      CURRENT_TRACKER == null ? void 0 : CURRENT_TRACKER.add(this);\n      return this._value;\n    } // Whenever a storage value is updated, we bump the global revision clock,\n    // assign the revision for this storage to the new value, _and_ we schedule a\n    // rerender. This is important, and it's what makes autotracking  _pull_\n    // based. We don't actively tell the caches which depend on the storage that\n    // anything has happened. Instead, we recompute the caches when needed.\n    ,\n    set: function set(newValue) {\n      if (this.value === newValue) return;\n      this._value = newValue;\n      this.revision = ++$REVISION;\n    }\n  }]);\n\n  return Cell;\n}();\n\nfunction tripleEq(a, b) {\n  return a === b;\n}\n\nvar TrackingCache = /*#__PURE__*/function () {\n  function TrackingCache(fn) {\n    _classCallCheck(this, TrackingCache);\n\n    __publicField(this, \"_cachedValue\");\n\n    __publicField(this, \"_cachedRevision\", -1);\n\n    __publicField(this, \"_deps\", []);\n\n    __publicField(this, \"hits\", 0);\n\n    __publicField(this, \"fn\");\n\n    this.fn = fn;\n  }\n\n  _createClass(TrackingCache, [{\n    key: \"clear\",\n    value: function clear() {\n      this._cachedValue = void 0;\n      this._cachedRevision = -1;\n      this._deps = [];\n      this.hits = 0;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      if (this.revision > this._cachedRevision) {\n        var fn = this.fn;\n        var currentTracker = /* @__PURE__ */new Set();\n        var prevTracker = CURRENT_TRACKER;\n        CURRENT_TRACKER = currentTracker;\n        this._cachedValue = fn();\n        CURRENT_TRACKER = prevTracker;\n        this.hits++;\n        this._deps = Array.from(currentTracker);\n        this._cachedRevision = this.revision;\n      }\n\n      CURRENT_TRACKER == null ? void 0 : CURRENT_TRACKER.add(this);\n      return this._cachedValue;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return Math.max.apply(Math, _toConsumableArray(this._deps.map(function (d) {\n        return d.revision;\n      })).concat([0]));\n    }\n  }]);\n\n  return TrackingCache;\n}();\n\nfunction getValue(cell) {\n  if (!(cell instanceof Cell)) {\n    console.warn(\"Not a valid cell! \", cell);\n  }\n\n  return cell.value;\n}\n\nfunction setValue(storage, value) {\n  if (!(storage instanceof Cell)) {\n    throw new TypeError(\"setValue must be passed a tracked store created with `createStorage`.\");\n  }\n\n  storage.value = storage._lastValue = value;\n}\n\nfunction createCell(initialValue) {\n  var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tripleEq;\n  return new Cell(initialValue, isEqual);\n}\n\nfunction createCache(fn) {\n  assertIsFunction(fn, \"the first parameter to `createCache` must be a function\");\n  return new TrackingCache(fn);\n} // src/autotrackMemoize/tracking.ts\n\n\nvar neverEq = function neverEq(a, b) {\n  return false;\n};\n\nfunction createTag() {\n  return createCell(null, neverEq);\n}\n\nfunction dirtyTag(tag, value) {\n  setValue(tag, value);\n}\n\nvar consumeCollection = function consumeCollection(node) {\n  var tag = node.collectionTag;\n\n  if (tag === null) {\n    tag = node.collectionTag = createTag();\n  }\n\n  getValue(tag);\n};\n\nvar dirtyCollection = function dirtyCollection(node) {\n  var tag = node.collectionTag;\n\n  if (tag !== null) {\n    dirtyTag(tag, null);\n  }\n}; // src/autotrackMemoize/proxy.ts\n\n\nvar REDUX_PROXY_LABEL = Symbol();\nvar nextId = 0;\nvar proto = Object.getPrototypeOf({});\n\nvar ObjectTreeNode = function ObjectTreeNode(value) {\n  _classCallCheck(this, ObjectTreeNode);\n\n  this.value = value;\n\n  __publicField(this, \"proxy\", new Proxy(this, objectProxyHandler));\n\n  __publicField(this, \"tag\", createTag());\n\n  __publicField(this, \"tags\", {});\n\n  __publicField(this, \"children\", {});\n\n  __publicField(this, \"collectionTag\", null);\n\n  __publicField(this, \"id\", nextId++);\n\n  this.value = value;\n  this.tag.value = value;\n};\n\nvar objectProxyHandler = {\n  get: function get(node, key) {\n    function calculateResult() {\n      var value = node.value;\n      var childValue = Reflect.get(value, key);\n\n      if (typeof key === \"symbol\") {\n        return childValue;\n      }\n\n      if (key in proto) {\n        return childValue;\n      }\n\n      if (typeof childValue === \"object\" && childValue !== null) {\n        var childNode = node.children[key];\n\n        if (childNode === void 0) {\n          childNode = node.children[key] = createNode(childValue);\n        }\n\n        if (childNode.tag) {\n          getValue(childNode.tag);\n        }\n\n        return childNode.proxy;\n      } else {\n        var tag = node.tags[key];\n\n        if (tag === void 0) {\n          tag = node.tags[key] = createTag();\n          tag.value = childValue;\n        }\n\n        getValue(tag);\n        return childValue;\n      }\n    }\n\n    var res = calculateResult();\n    return res;\n  },\n  ownKeys: function ownKeys(node) {\n    consumeCollection(node);\n    return Reflect.ownKeys(node.value);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(node, prop) {\n    return Reflect.getOwnPropertyDescriptor(node.value, prop);\n  },\n  has: function has(node, prop) {\n    return Reflect.has(node.value, prop);\n  }\n};\n\nvar ArrayTreeNode = function ArrayTreeNode(value) {\n  _classCallCheck(this, ArrayTreeNode);\n\n  this.value = value;\n\n  __publicField(this, \"proxy\", new Proxy([this], arrayProxyHandler));\n\n  __publicField(this, \"tag\", createTag());\n\n  __publicField(this, \"tags\", {});\n\n  __publicField(this, \"children\", {});\n\n  __publicField(this, \"collectionTag\", null);\n\n  __publicField(this, \"id\", nextId++);\n\n  this.value = value;\n  this.tag.value = value;\n};\n\nvar arrayProxyHandler = {\n  get: function get(_ref, key) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        node = _ref2[0];\n\n    if (key === \"length\") {\n      consumeCollection(node);\n    }\n\n    return objectProxyHandler.get(node, key);\n  },\n  ownKeys: function ownKeys(_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        node = _ref4[0];\n\n    return objectProxyHandler.ownKeys(node);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(_ref5, prop) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        node = _ref6[0];\n\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop);\n  },\n  has: function has(_ref7, prop) {\n    var _ref8 = _slicedToArray(_ref7, 1),\n        node = _ref8[0];\n\n    return objectProxyHandler.has(node, prop);\n  }\n};\n\nfunction createNode(value) {\n  if (Array.isArray(value)) {\n    return new ArrayTreeNode(value);\n  }\n\n  return new ObjectTreeNode(value);\n}\n\nfunction updateNode(node, newValue) {\n  var value = node.value,\n      tags = node.tags,\n      children = node.children;\n  node.value = newValue;\n\n  if (Array.isArray(value) && Array.isArray(newValue) && value.length !== newValue.length) {\n    dirtyCollection(node);\n  } else {\n    if (value !== newValue) {\n      var oldKeysSize = 0;\n      var newKeysSize = 0;\n      var anyKeysAdded = false;\n\n      for (var _key in value) {\n        oldKeysSize++;\n      }\n\n      for (var key in newValue) {\n        newKeysSize++;\n\n        if (!(key in value)) {\n          anyKeysAdded = true;\n          break;\n        }\n      }\n\n      var isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;\n\n      if (isDifferent) {\n        dirtyCollection(node);\n      }\n    }\n  }\n\n  for (var _key2 in tags) {\n    var childValue = value[_key2];\n    var newChildValue = newValue[_key2];\n\n    if (childValue !== newChildValue) {\n      dirtyCollection(node);\n      dirtyTag(tags[_key2], newChildValue);\n    }\n\n    if (typeof newChildValue === \"object\" && newChildValue !== null) {\n      delete tags[_key2];\n    }\n  }\n\n  for (var _key3 in children) {\n    var childNode = children[_key3];\n    var _newChildValue = newValue[_key3];\n    var _childValue = childNode.value;\n\n    if (_childValue === _newChildValue) {\n      continue;\n    } else if (typeof _newChildValue === \"object\" && _newChildValue !== null) {\n      updateNode(childNode, _newChildValue);\n    } else {\n      deleteNode(childNode);\n      delete children[_key3];\n    }\n  }\n}\n\nfunction deleteNode(node) {\n  if (node.tag) {\n    dirtyTag(node.tag, null);\n  }\n\n  dirtyCollection(node);\n\n  for (var key in node.tags) {\n    dirtyTag(node.tags[key], null);\n  }\n\n  for (var _key4 in node.children) {\n    deleteNode(node.children[_key4]);\n  }\n} // src/lruMemoize.ts\n\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = void 0;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    });\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex];\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    }\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nvar referenceEqualityCheck = function referenceEqualityCheck(a, b) {\n  return a === b;\n};\n\nfunction createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    }\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n\nfunction lruMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === \"object\" ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? referenceEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var resultsCount = 0;\n  var cache = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      value = func.apply(null, arguments);\n      resultsCount++;\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n          resultsCount !== 0 && resultsCount--;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    cache.clear();\n    memoized.resetResultsCount();\n  };\n\n  memoized.resultsCount = function () {\n    return resultsCount;\n  };\n\n  memoized.resetResultsCount = function () {\n    resultsCount = 0;\n  };\n\n  return memoized;\n} // src/autotrackMemoize/autotrackMemoize.ts\n\n\nfunction autotrackMemoize(func) {\n  var node = createNode([]);\n  var lastArgs = null;\n  var shallowEqual = createCacheKeyComparator(referenceEqualityCheck);\n  var cache = createCache(function () {\n    var res = func.apply(null, node.proxy);\n    return res;\n  });\n\n  function memoized() {\n    if (!shallowEqual(lastArgs, arguments)) {\n      updateNode(node, arguments);\n      lastArgs = arguments;\n    }\n\n    return cache.value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n} // src/weakMapMemoize.ts\n\n\nvar StrongRef = /*#__PURE__*/function () {\n  function StrongRef(value) {\n    _classCallCheck(this, StrongRef);\n\n    this.value = value;\n  }\n\n  _createClass(StrongRef, [{\n    key: \"deref\",\n    value: function deref() {\n      return this.value;\n    }\n  }]);\n\n  return StrongRef;\n}();\n\nvar Ref = typeof WeakRef !== \"undefined\" ? WeakRef : StrongRef;\nvar UNTERMINATED = 0;\nvar TERMINATED = 1;\n\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    v: void 0,\n    o: null,\n    p: null\n  };\n}\n\nfunction weakMapMemoize(func) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fnNode = createCacheNode();\n  var resultEqualityCheck = options.resultEqualityCheck;\n  var lastResult;\n  var resultsCount = 0;\n\n  function memoized() {\n    var _a, _b;\n\n    var cacheNode = fnNode;\n    var length = arguments.length;\n\n    for (var i = 0, l = length; i < l; i++) {\n      var arg = arguments[i];\n\n      if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n        var objectCache = cacheNode.o;\n\n        if (objectCache === null) {\n          cacheNode.o = objectCache = /* @__PURE__ */new WeakMap();\n        }\n\n        var objectNode = objectCache.get(arg);\n\n        if (objectNode === void 0) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        var primitiveCache = cacheNode.p;\n\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = /* @__PURE__ */new Map();\n        }\n\n        var primitiveNode = primitiveCache.get(arg);\n\n        if (primitiveNode === void 0) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n\n    var terminatedNode = cacheNode;\n    var result;\n\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v;\n    } else {\n      result = func.apply(null, arguments);\n      resultsCount++;\n\n      if (resultEqualityCheck) {\n        var lastResultValue = (_b = (_a = lastResult == null ? void 0 : lastResult.deref) == null ? void 0 : _a.call(lastResult)) != null ? _b : lastResult;\n\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\n          result = lastResultValue;\n          resultsCount !== 0 && resultsCount--;\n        }\n\n        var needsWeakRef = typeof result === \"object\" && result !== null || typeof result === \"function\";\n        lastResult = needsWeakRef ? new Ref(result) : result;\n      }\n    }\n\n    terminatedNode.s = TERMINATED;\n    terminatedNode.v = result;\n    return result;\n  }\n\n  memoized.clearCache = function () {\n    fnNode = createCacheNode();\n    memoized.resetResultsCount();\n  };\n\n  memoized.resultsCount = function () {\n    return resultsCount;\n  };\n\n  memoized.resetResultsCount = function () {\n    resultsCount = 0;\n  };\n\n  return memoized;\n} // src/createSelectorCreator.ts\n\n\nfunction createSelectorCreator(memoizeOrOptions) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key5 = 1; _key5 < _len; _key5++) {\n    memoizeOptionsFromArgs[_key5 - 1] = arguments[_key5];\n  }\n\n  var createSelectorCreatorOptions = typeof memoizeOrOptions === \"function\" ? {\n    memoize: memoizeOrOptions,\n    memoizeOptions: memoizeOptionsFromArgs\n  } : memoizeOrOptions;\n\n  var createSelector2 = function createSelector2() {\n    for (var _len2 = arguments.length, createSelectorArgs = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n      createSelectorArgs[_key6] = arguments[_key6];\n    }\n\n    var _recomputations = 0;\n    var _dependencyRecomputations = 0;\n\n    var _lastResult;\n\n    var directlyPassedOptions = {};\n    var resultFunc = createSelectorArgs.pop();\n\n    if (typeof resultFunc === \"object\") {\n      directlyPassedOptions = resultFunc;\n      resultFunc = createSelectorArgs.pop();\n    }\n\n    assertIsFunction(resultFunc, \"createSelector expects an output function after the inputs, but received: [\".concat(typeof resultFunc, \"]\"));\n\n    var combinedOptions = __spreadValues(__spreadValues({}, createSelectorCreatorOptions), directlyPassedOptions);\n\n    var memoize = combinedOptions.memoize,\n        _combinedOptions$memo = combinedOptions.memoizeOptions,\n        memoizeOptions = _combinedOptions$memo === void 0 ? [] : _combinedOptions$memo,\n        _combinedOptions$args = combinedOptions.argsMemoize,\n        argsMemoize = _combinedOptions$args === void 0 ? weakMapMemoize : _combinedOptions$args,\n        _combinedOptions$args2 = combinedOptions.argsMemoizeOptions,\n        argsMemoizeOptions = _combinedOptions$args2 === void 0 ? [] : _combinedOptions$args2,\n        _combinedOptions$devM = combinedOptions.devModeChecks,\n        devModeChecks = _combinedOptions$devM === void 0 ? {} : _combinedOptions$devM;\n    var finalMemoizeOptions = ensureIsArray(memoizeOptions);\n    var finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);\n    var dependencies = getDependencies(createSelectorArgs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++;\n      return resultFunc.apply(null, arguments);\n    }].concat(_toConsumableArray(finalMemoizeOptions)));\n    var firstRun = true;\n    var selector = argsMemoize.apply(void 0, [function dependenciesChecker() {\n      _dependencyRecomputations++;\n      var inputSelectorResults = collectInputSelectorResults(dependencies, arguments);\n      _lastResult = memoizedResultFunc.apply(null, inputSelectorResults);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        var _getDevModeChecksExec = getDevModeChecksExecutionInfo(firstRun, devModeChecks),\n            identityFunctionCheck = _getDevModeChecksExec.identityFunctionCheck,\n            inputStabilityCheck = _getDevModeChecksExec.inputStabilityCheck;\n\n        if (identityFunctionCheck.shouldRun) {\n          identityFunctionCheck.run(resultFunc, inputSelectorResults, _lastResult);\n        }\n\n        if (inputStabilityCheck.shouldRun) {\n          var inputSelectorResultsCopy = collectInputSelectorResults(dependencies, arguments);\n          inputStabilityCheck.run({\n            inputSelectorResults: inputSelectorResults,\n            inputSelectorResultsCopy: inputSelectorResultsCopy\n          }, {\n            memoize: memoize,\n            memoizeOptions: finalMemoizeOptions\n          }, arguments);\n        }\n\n        if (firstRun) firstRun = false;\n      }\n\n      return _lastResult;\n    }].concat(_toConsumableArray(finalArgsMemoizeOptions)));\n    return Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      dependencyRecomputations: function dependencyRecomputations() {\n        return _dependencyRecomputations;\n      },\n      resetDependencyRecomputations: function resetDependencyRecomputations() {\n        _dependencyRecomputations = 0;\n      },\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        _recomputations = 0;\n      },\n      memoize: memoize,\n      argsMemoize: argsMemoize\n    });\n  };\n\n  Object.assign(createSelector2, {\n    withTypes: function withTypes() {\n      return createSelector2;\n    }\n  });\n  return createSelector2;\n}\n\nvar createSelector = /* @__PURE__ */createSelectorCreator(weakMapMemoize); // src/createStructuredSelector.ts\n\nvar createStructuredSelector = Object.assign(function (inputSelectorsObject) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n  assertIsObject(inputSelectorsObject, \"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a \".concat(typeof inputSelectorsObject));\n  var inputSelectorKeys = Object.keys(inputSelectorsObject);\n  var dependencies = inputSelectorKeys.map(function (key) {\n    return inputSelectorsObject[key];\n  });\n  var structuredSelector = selectorCreator(dependencies, function () {\n    for (var _len3 = arguments.length, inputSelectorResults = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n      inputSelectorResults[_key7] = arguments[_key7];\n    }\n\n    return inputSelectorResults.reduce(function (composition, value, index) {\n      composition[inputSelectorKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return structuredSelector;\n}, {\n  withTypes: function withTypes() {\n    return createStructuredSelector;\n  }\n});\nexport { createSelector, createSelectorCreator, createStructuredSelector, lruMemoize, referenceEqualityCheck, setGlobalDevModeChecks, autotrackMemoize as unstable_autotrackMemoize, weakMapMemoize };","map":null,"metadata":{},"sourceType":"module"}