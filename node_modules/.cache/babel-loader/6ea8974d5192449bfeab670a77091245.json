{"ast":null,"code":"import _objectSpread from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"D:\\\\ThucTap\\\\ThucTap\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  provinces: [],\n  districts: [],\n  reload: false,\n  success: true,\n  error: null\n};\nexport var provincesSlice = createSlice({\n  name: \"provinces\",\n  initialState: initialState,\n  reducers: {\n    addProvinces: function addProvinces(state, action) {\n      state.provinces = [].concat(_toConsumableArray(state.provinces), [action.payload]);\n    },\n    updateProvinces: function updateProvinces(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          updatedProvince = _objectWithoutProperties(_action$payload, [\"id\"]);\n\n      var index = state.provinces.findIndex(function (province) {\n        return province.id === id;\n      });\n\n      if (index !== -1) {\n        state.provinces[index] = _objectSpread(_objectSpread({}, state.provinces[index]), updatedProvince);\n      }\n    },\n    deleteProvinces: function deleteProvinces(state, action) {\n      state.provinces = state.provinces.filter(function (ward) {\n        return ward.id !== action.payload;\n      });\n      state.reload = !state.reload;\n    },\n    showAllProvinces: function showAllProvinces(state, action) {\n      state.provinces = action.payload;\n    }\n  }\n});\nvar _provincesSlice$actio = provincesSlice.actions,\n    addProvinces = _provincesSlice$actio.addProvinces,\n    updateProvinces = _provincesSlice$actio.updateProvinces,\n    deleteProvinces = _provincesSlice$actio.deleteProvinces,\n    showAllProvinces = _provincesSlice$actio.showAllProvinces;\nexport { addProvinces, updateProvinces, deleteProvinces, showAllProvinces };\nexport default provincesSlice.reducer;","map":{"version":3,"sources":["D:/ThucTap/ThucTap/client/src/app/redux/reducers/ProvinceReduces.js"],"names":["createSlice","initialState","provinces","districts","reload","success","error","provincesSlice","name","reducers","addProvinces","state","action","payload","updateProvinces","id","updatedProvince","index","findIndex","province","deleteProvinces","filter","ward","showAllProvinces","actions","reducer"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,MAAM,EAAE,KAHW;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAOA,OAAO,IAAMC,cAAc,GAAGP,WAAW,CAAC;AACxCQ,EAAAA,IAAI,EAAE,WADkC;AAExCP,EAAAA,YAAY,EAAZA,YAFwC;AAGxCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/BD,MAAAA,KAAK,CAACT,SAAN,gCAAsBS,KAAK,CAACT,SAA5B,IAAuCU,MAAM,CAACC,OAA9C;AACD,KAHO;AAIRC,IAAAA,eAAe,EAAE,yBAACH,KAAD,EAAQC,MAAR,EAAmB;AAAA,4BACCA,MAAM,CAACC,OADR;AAAA,UAC1BE,EAD0B,mBAC1BA,EAD0B;AAAA,UACnBC,eADmB;;AAElC,UAAMC,KAAK,GAAGN,KAAK,CAACT,SAAN,CAAgBgB,SAAhB,CAA0B,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACJ,EAAT,KAAgBA,EAA9B;AAAA,OAA1B,CAAd;;AACA,UAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBN,QAAAA,KAAK,CAACT,SAAN,CAAgBe,KAAhB,oCACKN,KAAK,CAACT,SAAN,CAAgBe,KAAhB,CADL,GAEKD,eAFL;AAID;AACF,KAbO;AAcRI,IAAAA,eAAe,EAAE,yBAACT,KAAD,EAAQC,MAAR,EAAmB;AAClCD,MAAAA,KAAK,CAACT,SAAN,GAAkBS,KAAK,CAACT,SAAN,CAAgBmB,MAAhB,CAAuB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACP,EAAL,KAAYH,MAAM,CAACC,OAA7B;AAAA,OAAvB,CAAlB;AACAF,MAAAA,KAAK,CAACP,MAAN,GAAe,CAACO,KAAK,CAACP,MAAtB;AACD,KAjBO;AAkBRmB,IAAAA,gBAAgB,EAAE,0BAACZ,KAAD,EAAQC,MAAR,EAAmB;AACnCD,MAAAA,KAAK,CAACT,SAAN,GAAkBU,MAAM,CAACC,OAAzB;AACD;AApBO;AAH8B,CAAD,CAAlC;4BA+BHN,cAAc,CAACiB,O;IAJjBd,Y,yBAAAA,Y;IACAI,e,yBAAAA,e;IACAM,e,yBAAAA,e;IACAG,gB,yBAAAA,gB;;AAGF,eAAehB,cAAc,CAACkB,OAA9B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialState = {\r\n  provinces: [],\r\n  districts: [],\r\n  reload: false,\r\n  success: true,\r\n  error: null,\r\n};\r\nexport const provincesSlice = createSlice({\r\n  name: \"provinces\",\r\n  initialState,\r\n  reducers: {\r\n    addProvinces: (state, action) => {\r\n      state.provinces = [...state.provinces, action.payload];\r\n    },\r\n    updateProvinces: (state, action) => {\r\n      const { id, ...updatedProvince } = action.payload;\r\n      const index = state.provinces.findIndex((province) => province.id === id);\r\n      if (index !== -1) {\r\n        state.provinces[index] = {\r\n          ...state.provinces[index],\r\n          ...updatedProvince,\r\n        };\r\n      }\r\n    },\r\n    deleteProvinces: (state, action) => {\r\n      state.provinces = state.provinces.filter((ward) => ward.id !== action.payload);\r\n      state.reload = !state.reload;\r\n    },\r\n    showAllProvinces: (state, action) => {\r\n      state.provinces = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const {\r\n  addProvinces,\r\n  updateProvinces,\r\n  deleteProvinces,\r\n  showAllProvinces,\r\n} = provincesSlice.actions;\r\n\r\nexport default provincesSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}